/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var t;!function(t){t.CuriousReader="CuriousReader",t.GDL="GDL",t.Unknown="Unknown"}(t||(t={}));var e=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((i=i.apply(t,e||[])).next())}))};class n{constructor(t){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=t}parseBook(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{this.parseContentJSONFile().then((e=>{this.contentJSON=e,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),t(n)})).catch((t=>{e(t)}))}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?t.CuriousReader:void 0!==this.contentJSON.chapters?t.GDL:t.Unknown}parsePages(e){let n=[];if(e.bookType===t.CuriousReader){let t=this.contentJSON.presentation.slides,e=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<t.length;i++){let o=t[i],r={visualElements:[],backgroundColor:e};r.visualElements=this.parsePageCR(o),n.push(r)}}else if(e.bookType===t.GDL){let t=this.contentJSON.chapters,e="#FCFCF2";for(let i=0;i<t.length;i++){let o=t[i],r={visualElements:[],backgroundColor:e};r.visualElements=this.parsePageGDL(o),n.push(r)}}else console.log("Unknown book type!");return n}parsePageCR(t){let e=[],n=t.elements;for(let t=0;t<n.length;t++){let i=n[t].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[t]);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[t]);e.push(i)}}return e}parsePageGDL(t){let e=[],n=t.params.content;for(let t=0;t<n.length;t++){let i=n[t].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[t].content.params);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[t].content.params);e.push(i)}}return e}parseTextElementCR(t){return{type:"text",positionX:t.x,positionY:t.y,width:t.width,height:t.height,textContentAsHTML:t.action.params.text}}parseTextElementGDL(t){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:t.text}}parseImageElementCR(t){let e="";return e=void 0===t.action.params.file?this.emptyGlowImageTag:t.action.params.file.path,{type:"image",positionX:t.x,positionY:t.y,width:t.width,height:t.height,imageSource:e}}parseImageElementGDL(t){return{type:"image",positionX:NaN,positionY:NaN,width:t.width,height:t.height,imageSource:t.file.path}}parseAudioElementCR(t){return{type:"audio",positionX:t.position.x,positionY:t.position.y,width:t.size.width,height:t.size.height,audioSrc:t.action.audioSrc,styles:t.styles}}parseContentJSONFile(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let e=n.response;delete e.l10n,delete e.override,t(e)}else e(n.response)},n.send()}))}))}}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o="(prefers-reduced-motion: reduce)",r={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function s(t){t.length=0}function a(t,e,n){return Array.prototype.slice.call(t,e,n)}function u(t){return t.bind.apply(t,[null].concat(a(arguments,1)))}var c=setTimeout,l=function(){};function d(t){return requestAnimationFrame(t)}function f(t,e){return typeof e===t}function h(t){return!y(t)&&f("object",t)}var p=Array.isArray,g=u(f,"function"),v=u(f,"string"),m=u(f,"undefined");function y(t){return null===t}function w(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function b(t){return p(t)?t:[t]}function E(t,e){b(t).forEach(e)}function S(t,e){return t.indexOf(e)>-1}function x(t,e){return t.push.apply(t,b(e)),t}function P(t,e,n){t&&E(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function k(t,e){P(t,v(e)?e.split(" "):e,!0)}function C(t,e){E(e,t.appendChild.bind(t))}function L(t,e){E(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function T(t,e){return w(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function A(t,e){var n=t?a(t.children):[];return e?n.filter((function(t){return T(t,e)})):n}function N(t,e){return e?A(t,e)[0]:t.firstElementChild}var D=Object.keys;function M(t,e,n){return t&&(n?D(t).reverse():D(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function z(t){return a(arguments,1).forEach((function(e){M(e,(function(n,i){t[i]=e[i]}))})),t}function I(t){return a(arguments,1).forEach((function(e){M(e,(function(e,n){p(e)?t[n]=e.slice():h(e)?t[n]=I({},h(t[n])?t[n]:{},e):t[n]=e}))})),t}function F(t,e){E(e||D(t),(function(e){delete t[e]}))}function O(t,e){E(t,(function(t){E(e,(function(e){t&&t.removeAttribute(e)}))}))}function R(t,e,n){h(e)?M(e,(function(e,n){R(t,n,e)})):E(t,(function(t){y(n)||""===n?O(t,e):t.setAttribute(e,String(n))}))}function B(t,e,n){var i=document.createElement(t);return e&&(v(e)?k(i,e):R(i,e)),n&&C(n,i),i}function j(t,e,n){if(m(n))return getComputedStyle(t)[e];y(n)||(t.style[e]=""+n)}function G(t,e){j(t,"display",e)}function W(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function H(t,e){return t.getAttribute(e)}function X(t,e){return t&&t.classList.contains(e)}function U(t){return t.getBoundingClientRect()}function J(t){E(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function Y(t){return N((new DOMParser).parseFromString(t,"text/html").body)}function q(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function K(t,e){return t&&t.querySelector(e)}function Q(t,e){return e?a(t.querySelectorAll(e)):[]}function V(t,e){P(t,e,!1)}function $(t){return t.timeStamp}function Z(t){return v(t)?t:t?t+"px":""}var tt="splide",et="data-"+tt;function nt(t,e){if(!t)throw new Error("["+tt+"] "+(e||""))}var it=Math.min,ot=Math.max,rt=Math.floor,st=Math.ceil,at=Math.abs;function ut(t,e,n){return at(t-e)<n}function ct(t,e,n,i){var o=it(e,n),r=ot(e,n);return i?o<t&&t<r:o<=t&&t<=r}function lt(t,e,n){var i=it(e,n),o=ot(e,n);return it(ot(i,t),o)}function dt(t){return+(t>0)-+(t<0)}function ft(t,e){return E(e,(function(e){t=t.replace("%s",""+e)})),t}function ht(t){return t<10?"0"+t:""+t}var pt={};function gt(){var t=[];function e(t,e,n){E(t,(function(t){t&&E(e,(function(e){e.split(" ").forEach((function(e){var i=e.split(".");n(t,i[0],i[1])}))}))}))}return{bind:function(n,i,o,r){e(n,i,(function(e,n,i){var s="addEventListener"in e,a=s?e.removeEventListener.bind(e,n,o,r):e.removeListener.bind(e,o);s?e.addEventListener(n,o,r):e.addListener(o),t.push([e,n,i,o,a])}))},unbind:function(n,i,o){e(n,i,(function(e,n,i){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==i||o&&t[3]!==o)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(e,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(i),i},destroy:function(){t.forEach((function(t){t[4]()})),s(t)}}}var vt="mounted",mt="ready",yt="move",wt="moved",bt="click",Et="refresh",St="updated",xt="resize",Pt="resized",kt="scroll",Ct="scrolled",Lt="destroy",Tt="navigation:mounted",_t="autoplay:play",At="autoplay:pause",Nt="lazyload:loaded",Dt="ei";function Mt(t){var e=t?t.event.bus:document.createDocumentFragment(),n=gt();return t&&t.event.on(Lt,n.destroy),z(n,{bus:e,on:function(t,i){n.bind(e,b(t).join(" "),(function(t){i.apply(i,p(t.detail)?t.detail:[])}))},off:u(n.unbind,e),emit:function(t){n.dispatch(e,t,a(arguments,1))}})}function zt(t,e,n,i){var o,r,s=Date.now,a=0,u=!0,c=0;function l(){if(!u){if(a=t?it((s()-o)/t,1):1,n&&n(a),a>=1&&(e(),o=s(),i&&++c>=i))return f();r=d(l)}}function f(){u=!0}function h(){r&&cancelAnimationFrame(r),a=0,r=0,u=!0}return{start:function(e){e||h(),o=s()-(e?a*t:0),u=!1,r=d(l)},rewind:function(){o=s(),a=0,n&&n(a)},pause:f,cancel:h,set:function(e){t=e},isPaused:function(){return u}}}var It="Arrow",Ft=It+"Left",Ot=It+"Right",Rt=It+"Up",Bt=It+"Down",jt="ttb",Gt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Rt,Ot],ArrowRight:[Bt,Ft]};var Wt="role",Ht="tabindex",Xt="aria-",Ut=Xt+"controls",Jt=Xt+"current",Yt=Xt+"selected",qt=Xt+"label",Kt=Xt+"labelledby",Qt=Xt+"hidden",Vt=Xt+"orientation",$t=Xt+"roledescription",Zt=Xt+"live",te=Xt+"busy",ee=Xt+"atomic",ne=[Wt,Ht,"disabled",Ut,Jt,qt,Kt,Qt,Vt,$t],ie=tt+"__",oe="is-",re=tt,se=ie+"track",ae=ie+"list",ue=ie+"slide",ce=ue+"--clone",le=ue+"__container",de=ie+"arrows",fe=ie+"arrow",he=fe+"--prev",pe=fe+"--next",ge=ie+"pagination",ve=ge+"__page",me=ie+"progress__bar",ye=ie+"toggle",we=ie+"sr",be=oe+"initialized",Ee=oe+"active",Se=oe+"prev",xe=oe+"next",Pe=oe+"visible",ke=oe+"loading",Ce=oe+"focus-in",Le=oe+"overflow",Te=[Ee,Pe,Se,xe,ke,Ce,Le],_e={slide:ue,clone:ce,arrows:de,arrow:fe,prev:he,next:pe,pagination:ge,page:ve,spinner:ie+"spinner"},Ae="touchstart mousedown",Ne="touchmove mousemove",De="touchend touchcancel mouseup click",Me="slide",ze="loop",Ie="fade";var Fe=et+"-interval",Oe={passive:!1,capture:!0},Re={Spacebar:" ",Right:Ot,Left:Ft,Up:Rt,Down:Bt};function Be(t){return t=v(t)?t:t.key,Re[t]||t}var je="keydown",Ge=et+"-lazy",We=Ge+"-srcset",He="["+Ge+"], ["+We+"]",Xe=[" ","Enter"],Ue=Object.freeze({__proto__:null,Media:function(t,e,n){var i=t.state,r=n.breakpoints||{},s=n.reducedMotion||{},a=gt(),u=[];function c(t){t&&a.destroy()}function l(t,e){var n=matchMedia(e);a.bind(n,"change",d),u.push([t,n])}function d(){var e=i.is(7),o=n.direction,r=u.reduce((function(t,e){return I(t,e[1].matches?e[0]:{})}),{});F(n),f(r),n.destroy?t.destroy("completely"===n.destroy):e?(c(!0),t.mount()):o!==n.direction&&t.refresh()}function f(e,o,r){I(n,e),o&&I(Object.getPrototypeOf(n),e),!r&&i.is(1)||t.emit(St,n)}return{setup:function(){var t="min"===n.mediaQuery;D(r).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(r[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(s,o),d()},destroy:c,reduce:function(t){matchMedia(o).matches&&(t?I(n,s):F(n,D(s)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,i){var o="rtl"!==(i=i||n.direction)||e?i===jt?0:-1:1;return Gt[t]&&Gt[t][o]||t.replace(/width|left|right/i,(function(t,e){var n=Gt[t.toLowerCase()][o]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var i,o,r,a=Mt(t),u=a.on,c=a.bind,l=t.root,d=n.i18n,f={},h=[],p=[],v=[];function m(){var t,e,r;i=b("."+se),o=N(i,"."+ae),nt(i&&o,"A track/list element is missing."),x(h,A(o,"."+ue+":not(."+ce+")")),M({arrows:de,pagination:ge,prev:he,next:pe,bar:me,toggle:ye},(function(t,e){f[e]=b("."+t)})),z(f,{root:l,track:i,list:o,slides:h}),e=l.id||""+(t=tt)+ht(pt[t]=(pt[t]||0)+1),r=n.role,l.id=e,i.id=i.id||e+"-track",o.id=o.id||e+"-list",!H(l,Wt)&&"SECTION"!==l.tagName&&r&&R(l,Wt,r),R(l,$t,d.carousel),R(o,Wt,"presentation"),w()}function y(t){var e=ne.concat("style");s(h),V(l,p),V(i,v),O([i,o],e),O(l,t?e:["style",$t])}function w(){V(l,p),V(i,v),p=E(re),v=E(se),k(l,p),k(i,v),R(l,qt,n.label),R(l,Kt,n.labelledby)}function b(t){var e=K(l,t);return e&&function(t,e){if(g(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!T(n,e);)n=n.parentElement;return n}(e,"."+re)===l?e:void 0}function E(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===re&&Ee]}return z(f,{setup:m,mount:function(){u(Et,y),u(Et,m),u(St,w),c(document,Ae+" keydown",(function(t){r="keydown"===t.type}),{capture:!0}),c(l,"focusin",(function(){P(l,Ce,!!r)}))},destroy:y})},Slides:function(t,e,n){var i=Mt(t),o=i.on,r=i.emit,a=i.bind,c=e.Elements,l=c.slides,d=c.list,f=[];function h(){l.forEach((function(t,e){m(t,e,-1)}))}function p(){x((function(t){t.destroy()})),s(f)}function m(e,n,i){var o=function(t,e,n,i){var o,r=Mt(t),s=r.on,a=r.emit,c=r.bind,l=t.Components,d=t.root,f=t.options,h=f.isNavigation,p=f.updateOnMove,g=f.i18n,v=f.pagination,m=f.slideFocus,y=l.Direction.resolve,w=H(i,"style"),b=H(i,qt),E=n>-1,S=N(i,"."+le);function x(){var o=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");R(i,qt,ft(g.slideX,(E?n:e)+1)),R(i,Ut,o),R(i,Wt,m?"button":""),m&&O(i,$t)}function k(){o||C()}function C(){if(!o){var n=t.index;(r=L())!==X(i,Ee)&&(P(i,Ee,r),R(i,Jt,h&&r||""),a(r?"active":"inactive",T)),function(){var e=function(){if(t.is(Ie))return L();var e=U(l.Elements.track),n=U(i),o=y("left",!0),r=y("right",!0);return rt(e[o])<=st(n[o])&&rt(n[r])<=st(e[r])}(),n=!e&&(!L()||E);if(t.state.is([4,5])||R(i,Qt,n||""),R(Q(i,f.focusableNodes||""),Ht,n?-1:""),m&&R(i,Ht,n?-1:0),e!==X(i,Pe)&&(P(i,Pe,e),a(e?"visible":"hidden",T)),!e&&document.activeElement===i){var o=l.Slides.getAt(t.index);o&&W(o.slide)}}(),P(i,Se,e===n-1),P(i,xe,e===n+1)}var r}function L(){var i=t.index;return i===e||f.cloneStatus&&i===n}var T={index:e,slideIndex:n,slide:i,container:S,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+ht(e+1),R(i,Wt,v?"tabpanel":"group"),R(i,$t,g.slide),R(i,qt,b||ft(g.slideLabel,[e+1,t.length]))),c(i,"click",u(a,bt,T)),c(i,"keydown",u(a,"sk",T)),s([wt,"sh",Ct],C),s(Tt,x),p&&s(yt,k)},destroy:function(){o=!0,r.destroy(),V(i,Te),O(i,ne),R(i,"style",w),R(i,qt,b||"")},update:C,style:function(t,e,n){j(n&&S||i,t,e)},isWithin:function(n,i){var o=at(n-e);return E||!f.rewind&&!t.is(ze)||(o=it(o,t.length-o)),o<=i}};return T}(t,n,i,e);o.mount(),f.push(o),f.sort((function(t,e){return t.index-e.index}))}function y(t){return t?_((function(t){return!t.isClone})):f}function x(t,e){y(e).forEach(t)}function _(t){return f.filter(g(t)?t:function(e){return v(t)?T(e.slide,t):S(b(t),e.index)})}return{mount:function(){h(),o(Et,p),o(Et,h)},destroy:p,update:function(){x((function(t){t.update()}))},register:m,get:y,getIn:function(t){var i=e.Controller,o=i.toIndex(t),r=i.hasFocus()?1:n.perPage;return _((function(t){return ct(t.index,o,o+r-1)}))},getAt:function(t){return _(t)[0]},add:function(t,e){E(t,(function(t){if(v(t)&&(t=Y(t)),w(t)){var i=l[e];i?L(t,i):C(d,t),k(t,n.classes.slide),o=t,s=u(r,xt),c=Q(o,"img"),(f=c.length)?c.forEach((function(t){a(t,"load error",(function(){--f||s()}))})):s()}var o,s,c,f})),r(Et)},remove:function(t){J(_(t).map((function(t){return t.slide}))),r(Et)},forEach:x,filter:_,style:function(t,e,n){x((function(i){i.style(t,e,n)}))},getLength:function(t){return t?l.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(t,e,n){var i,o,r,s=Mt(t),a=s.on,c=s.bind,l=s.emit,d=e.Slides,f=e.Direction.resolve,p=e.Elements,g=p.root,v=p.track,m=p.list,y=d.getAt,w=d.style;function b(){i=n.direction===jt,j(g,"maxWidth",Z(n.width)),j(v,f("paddingLeft"),S(!1)),j(v,f("paddingRight"),S(!0)),E(!0)}function E(t){var e,s=U(g);(t||o.width!==s.width||o.height!==s.height)&&(j(v,"height",(e="",i&&(nt(e=x(),"height or heightRatio is missing."),e="calc("+e+" - "+S(!1)+" - "+S(!0)+")"),e)),w(f("marginRight"),Z(n.gap)),w("width",n.autoWidth?null:Z(n.fixedWidth)||(i?"":k())),w("height",Z(n.fixedHeight)||(i?n.autoHeight?null:k():x()),!0),o=s,l(Pt),r!==(r=N())&&(P(g,Le,r),l("overflow",r)))}function S(t){var e=n.padding,i=f(t?"right":"left");return e&&Z(e[i]||(h(e)?0:e))||"0px"}function x(){return Z(n.height||U(m).width*n.heightRatio)}function k(){var t=Z(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function C(){return U(m)[f("width")]}function L(t,e){var n=y(t||0);return n?U(n.slide)[f("width")]+(e?0:A()):0}function T(t,e){var n=y(t);if(n){var i=U(n.slide)[f("right")],o=U(m)[f("left")];return at(i-o)+(e?0:A())}return 0}function _(e){return T(t.length-1)-T(0)+L(0,e)}function A(){var t=y(0);return t&&parseFloat(j(t.slide,f("marginRight")))||0}function N(){return t.is(Ie)||_(!0)>C()}return{mount:function(){var t,e;b(),c(window,"resize load",(t=u(l,xt),e=zt(0,t,null,1),function(){e.isPaused()&&e.start()})),a([St,Et],b),a(xt,E)},resize:E,listSize:C,slideSize:L,sliderSize:_,totalSize:T,getPadding:function(t){return parseFloat(j(v,f("padding"+(t?"Right":"Left"))))||0},isOverflow:N}},Clones:function(t,e,n){var i,o=Mt(t),r=o.on,a=e.Elements,u=e.Slides,c=e.Direction.resolve,l=[];function d(){r(Et,f),r([St,xt],p),(i=g())&&(function(e){var i=u.get().slice(),o=i.length;if(o){for(;i.length<e;)x(i,i);x(i.slice(-e),i.slice(0,e)).forEach((function(r,s){var c=s<e,d=function(e,i){var o=e.cloneNode(!0);return k(o,n.classes.clone),o.id=t.root.id+"-clone"+ht(i+1),o}(r.slide,s);c?L(d,i[0].slide):C(a.list,d),x(l,d),u.register(d,s-e+(c?0:o),r.index)}))}}(i),e.Layout.resize(!0))}function f(){h(),d()}function h(){J(l),s(l),o.destroy()}function p(){var t=g();i!==t&&(i<t||!t)&&o.emit(Et)}function g(){var i=n.clones;if(t.is(ze)){if(m(i)){var o=n[c("fixedWidth")]&&e.Layout.slideSize(0);i=o&&st(U(a.track)[c("width")]/o)||n[c("autoWidth")]&&t.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:h}},Move:function(t,e,n){var i,o=Mt(t),r=o.on,s=o.emit,a=t.state.set,u=e.Layout,c=u.slideSize,l=u.getPadding,d=u.totalSize,f=u.listSize,h=u.sliderSize,p=e.Direction,g=p.resolve,v=p.orient,y=e.Elements,w=y.list,b=y.track;function E(){e.Controller.isBusy()||(e.Scroll.cancel(),S(t.index),e.Slides.update())}function S(t){x(L(t,!0))}function x(n,i){if(!t.is(Ie)){var o=i?n:function(n){if(t.is(ze)){var i=C(n),o=i>e.Controller.getEnd();(i<0||o)&&(n=P(n,o))}return n}(n);j(w,"transform","translate"+g("X")+"("+o+"px)"),n!==o&&s("sh")}}function P(t,e){var n=t-_(e),i=h();return t-v(i*(st(at(n)/i)||1))*(e?1:-1)}function k(){x(T(),!0),i.cancel()}function C(t){for(var n=e.Slides.get(),i=0,o=1/0,r=0;r<n.length;r++){var s=n[r].index,a=at(L(s,!0)-t);if(!(a<=o))break;o=a,i=s}return i}function L(e,i){var o=v(d(e-1)-function(t){var e=n.focus;return"center"===e?(f()-c(t,!0))/2:+e*c(t)||0}(e));return i?function(e){return n.trimSpace&&t.is(Me)&&(e=lt(e,0,v(h(!0)-f()))),e}(o):o}function T(){var t=g("left");return U(w)[t]-U(b)[t]+v(l(!1))}function _(t){return L(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=e.Transition,r([vt,Pt,St,Et],E)},move:function(t,e,n,o){var r,u;t!==e&&(r=t>n,u=v(P(T(),r)),r?u>=0:u<=w[g("scrollWidth")]-U(b)[g("width")])&&(k(),x(P(T(),t>n),!0)),a(4),s(yt,e,n,t),i.start(e,(function(){a(3),s(wt,e,n,t),o&&o()}))},jump:S,translate:x,shift:P,cancel:k,toIndex:C,toPosition:L,getPosition:T,getLimit:_,exceededLimit:function(t,e){e=m(e)?T():e;var n=!0!==t&&v(e)<v(_(!1)),i=!1!==t&&v(e)>v(_(!0));return n||i},reposition:E}},Controller:function(t,e,n){var i,o,r,s,a=Mt(t),c=a.on,l=a.emit,d=e.Move,f=d.getPosition,h=d.getLimit,p=d.toPosition,g=e.Slides,y=g.isEnough,w=g.getLength,b=n.omitEnd,E=t.is(ze),S=t.is(Me),x=u(_,!1),P=u(_,!0),k=n.start||0,C=k;function L(){o=w(!0),r=n.perMove,s=n.perPage,i=D();var t=lt(k,0,b?i:o-1);t!==k&&(k=t,d.reposition())}function T(){i!==D()&&l(Dt)}function _(t,e){var n=r||(F()?1:s),o=A(k+n*(t?-1:1),k,!(r||F()));return-1===o&&S&&!ut(f(),h(!t),1)?t?0:i:e?o:N(o)}function A(e,a,u){if(y()||F()){var c=function(e){if(S&&"move"===n.trimSpace&&e!==k)for(var i=f();i===p(e,!0)&&ct(e,0,t.length-1,!n.rewind);)e<k?--e:++e;return e}(e);c!==e&&(a=e,e=c,u=!1),e<0||e>i?e=r||!ct(0,e,a,!0)&&!ct(i,a,e,!0)?E?u?e<0?-(o%s||s):o:e:n.rewind?e<0?i:0:-1:M(z(e)):u&&e!==a&&(e=M(z(a)+(e<a?-1:1)))}else e=-1;return e}function N(t){return E?(t+o)%o||0:t}function D(){for(var t=o-(F()||E&&r?1:s);b&&t-- >0;)if(p(o-1,!0)!==p(t,!0)){t++;break}return lt(t,0,o-1)}function M(t){return lt(F()?t:s*t,0,i)}function z(t){return F()?it(t,i):rt((t>=i?o-1:t)/s)}function I(t){t!==k&&(C=k,k=t)}function F(){return!m(n.focus)||n.isNavigation}function O(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),c([St,Et,Dt],L),c(Pt,T)},go:function(t,e,n){if(!O()){var o=function(t){var e=k;if(v(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],o=n[1],r=n[2];"+"===o||"-"===o?e=A(k+ +(""+o+(+r||1)),k):">"===o?e=r?M(+r):x(!0):"<"===o&&(e=P(!0))}else e=E?t:lt(t,0,i);return e}(t),r=N(o);r>-1&&(e||r!==k)&&(I(r),d.move(o,r,C,n))}},scroll:function(t,n,o,r){e.Scroll.scroll(t,n,o,(function(){var t=N(d.toIndex(f()));I(b?it(t,i):t),r&&r()}))},getNext:x,getPrev:P,getAdjacent:_,getEnd:D,setIndex:I,getIndex:function(t){return t?C:k},toIndex:M,toPage:z,toDest:function(t){var e=d.toIndex(t);return S?lt(e,0,i):e},hasFocus:F,isBusy:O}},Arrows:function(t,e,n){var i,o,r=Mt(t),s=r.on,a=r.bind,c=r.emit,l=n.classes,d=n.i18n,f=e.Elements,h=e.Controller,p=f.arrows,g=f.track,v=p,m=f.prev,y=f.next,w={};function b(){var t;!(t=n.arrows)||m&&y||(v=p||B("div",l.arrows),m=P(!0),y=P(!1),i=!0,C(v,[m,y]),!p&&L(v,g)),m&&y&&(z(w,{prev:m,next:y}),G(v,t?"":"none"),k(v,o=de+"--"+n.direction),t&&(s([vt,wt,Et,Ct,Dt],T),a(y,"click",u(x,">")),a(m,"click",u(x,"<")),T(),R([m,y],Ut,g.id),c("arrows:mounted",m,y))),s(St,E)}function E(){S(),b()}function S(){r.destroy(),V(v,o),i?(J(p?[m,y]:v),m=y=null):O([m,y],ne)}function x(t){h.go(t,!0)}function P(t){return Y('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function T(){if(m&&y){var e=t.index,n=h.getPrev(),i=h.getNext(),o=n>-1&&e<n?d.last:d.prev,r=i>-1&&e>i?d.first:d.next;m.disabled=n<0,y.disabled=i<0,R(m,qt,o),R(y,qt,r),c("arrows:updated",m,y,n,i)}}return{arrows:w,mount:b,destroy:S,update:T}},Autoplay:function(t,e,n){var i,o,r=Mt(t),s=r.on,a=r.bind,u=r.emit,c=zt(n.interval,t.go.bind(t,">"),(function(t){var e=d.bar;e&&j(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=c.isPaused,d=e.Elements,f=e.Elements,h=f.root,p=f.toggle,g=n.autoplay,v="pause"===g;function m(){l()&&e.Slides.isEnough()&&(c.start(!n.resetProgress),o=i=v=!1,b(),u(_t))}function y(t){void 0===t&&(t=!0),v=!!t,b(),l()||(c.pause(),u(At))}function w(){v||(i||o?y(!1):m())}function b(){p&&(P(p,Ee,!v),R(p,qt,n.i18n[v?"play":"pause"]))}function E(t){var i=e.Slides.getAt(t);c.set(i&&+H(i.slide,Fe)||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&a(h,"mouseenter mouseleave",(function(t){i="mouseenter"===t.type,w()})),n.pauseOnFocus&&a(h,"focusin focusout",(function(t){o="focusin"===t.type,w()})),p&&a(p,"click",(function(){v?m():y(!0)})),s([yt,kt,Et],c.rewind),s(yt,E),p&&R(p,Ut,d.track.id),v||m(),b())},destroy:c.cancel,play:m,pause:y,isPaused:l}},Cover:function(t,e,n){var i=Mt(t).on;function o(t){e.Slides.forEach((function(e){var n=N(e.container||e.slide,"img");n&&n.src&&r(t,n,e)}))}function r(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),G(e,t?"none":"")}return{mount:function(){n.cover&&(i(Nt,u(r,!0)),i([vt,St,Et],u(o,!0)))},destroy:u(o,!1)}},Scroll:function(t,e,n){var i,o,r=Mt(t),s=r.on,a=r.emit,c=t.state.set,l=e.Move,d=l.getPosition,f=l.getLimit,h=l.exceededLimit,p=l.translate,g=t.is(Me),v=1;function m(t,n,r,s,f){var p=d();if(b(),r&&(!g||!h())){var m=e.Layout.sliderSize(),E=dt(t)*m*rt(at(t)/m)||0;t=l.toPosition(e.Controller.toDest(t%m))+E}var S=ut(p,t,1);v=1,n=S?0:n||ot(at(t-p)/1.5,800),o=s,i=zt(n,y,u(w,p,t,f),1),c(5),a(kt),i.start()}function y(){c(3),o&&o(),a(Ct)}function w(t,e,i,r){var s=d(),a=t+(e-t)*function(t){var e=n.easingFunc;return e?e(t):1-Math.pow(1-t,4)}(r),u=(a-s)*v;p(s+u),g&&!i&&h()&&(v*=.6,at(u)<10&&m(f(h(!0)),600,!1,o,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){s(yt,b),s([St,Et],E)},destroy:b,scroll:m,cancel:E}},Drag:function(t,e,n){var i,o,r,s,a,u,c,d,f=Mt(t),p=f.on,g=f.emit,v=f.bind,m=f.unbind,y=t.state,w=e.Move,b=e.Scroll,E=e.Controller,S=e.Elements.track,x=e.Media.reduce,P=e.Direction,k=P.resolve,C=P.orient,L=w.getPosition,_=w.exceededLimit,A=!1;function N(){var t=n.drag;W(!t),s="free"===t}function D(t){if(u=!1,!c){var e=G(t);i=t.target,o=n.noDrag,T(i,"."+ve+", ."+fe)||o&&T(i,o)||!e&&t.button||(E.isBusy()?q(t,!0):(d=e?S:window,a=y.is([4,5]),r=null,v(d,Ne,M,Oe),v(d,De,z,Oe),w.cancel(),b.cancel(),F(t)))}var i,o}function M(e){if(y.is(6)||(y.set(6),g("drag")),e.cancelable)if(a){w.translate(i+O(e)/(A&&t.is(Me)?5:1));var o=R(e)>200,r=A!==(A=_());(o||r)&&F(e),u=!0,g("dragging"),q(e)}else(function(t){return at(O(t))>at(O(t,!0))})(e)&&(a=function(t){var e=n.dragMinThreshold,i=h(e),o=i&&e.mouse||0,r=(i?e.touch:+e)||10;return at(O(t))>(G(t)?r:o)}(e),q(e))}function z(i){y.is(6)&&(y.set(3),g("dragged")),a&&(function(i){var o=function(e){if(t.is(ze)||!A){var n=R(e);if(n&&n<200)return O(e)/n}return 0}(i),r=function(t){return L()+dt(t)*it(at(t)*(n.flickPower||600),s?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(o),a=n.rewind&&n.rewindByDrag;x(!1),s?E.scroll(r,0,n.snap):t.is(Ie)?E.go(C(dt(o))<0?a?"<":"-":a?">":"+"):t.is(Me)&&A&&a?E.go(_(!0)?">":"<"):E.go(E.toDest(r),!0),x(!0)}(i),q(i)),m(d,Ne,M),m(d,De,z),a=!1}function I(t){!c&&u&&q(t,!0)}function F(t){r=o,o=t,i=L()}function O(t,e){return j(t,e)-j(B(t),e)}function R(t){return $(t)-$(B(t))}function B(t){return o===t&&r||o}function j(t,e){return(G(t)?t.changedTouches[0]:t)["page"+k(e?"Y":"X")]}function G(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function W(t){c=t}return{mount:function(){v(S,Ne,l,Oe),v(S,De,l,Oe),v(S,Ae,D,Oe),v(S,"click",I,{capture:!0}),v(S,"dragstart",q),p([vt,St],N)},disable:W,isDragging:function(){return a}}},Keyboard:function(t,e,n){var i,o,r=Mt(t),s=r.on,a=r.bind,u=r.unbind,l=t.root,d=e.Direction.resolve;function f(){var t=n.keyboard;t&&(i="global"===t?window:l,a(i,je,g))}function h(){u(i,je)}function p(){var t=o;o=!0,c((function(){o=t}))}function g(e){if(!o){var n=Be(e);n===d(Ft)?t.go("<"):n===d(Ot)&&t.go(">")}}return{mount:function(){f(),s(St,h),s(St,f),s(yt,p)},destroy:h,disable:function(t){o=t}}},LazyLoad:function(t,e,n){var i=Mt(t),o=i.on,r=i.off,a=i.bind,c=i.emit,l="sequential"===n.lazyLoad,d=[wt,Ct],f=[];function h(){s(f),e.Slides.forEach((function(t){Q(t.slide,He).forEach((function(e){var i=H(e,Ge),o=H(e,We);if(i!==e.src||o!==e.srcset){var r=n.classes.spinner,s=e.parentElement,a=N(s,"."+r)||B("span",r,s);f.push([e,t,a]),e.src||G(e,"none")}}))})),l?m():(r(d),o(d,p),p())}function p(){(f=f.filter((function(e){var i=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,i)||g(e)}))).length||r(d)}function g(t){var e=t[0];k(t[1].slide,ke),a(e,"load error",u(v,t)),R(e,"src",H(e,Ge)),R(e,"srcset",H(e,We)),O(e,Ge),O(e,We)}function v(t,e){var n=t[0],i=t[1];V(i.slide,ke),"error"!==e.type&&(J(t[2]),G(n,""),c(Nt,n,i),c(xt)),l&&m()}function m(){f.length&&g(f.shift())}return{mount:function(){n.lazyLoad&&(h(),o(Et,h))},destroy:u(s,f),check:p}},Pagination:function(t,e,n){var i,o,r=Mt(t),c=r.on,l=r.emit,d=r.bind,f=e.Slides,h=e.Elements,p=e.Controller,g=p.hasFocus,v=p.getIndex,m=p.go,y=e.Direction.resolve,w=h.pagination,b=[];function E(){i&&(J(w?a(i.children):i),V(i,o),s(b),i=null),r.destroy()}function S(t){m(">"+t,!0)}function x(t,e){var n=b.length,i=Be(e),o=P(),r=-1;i===y(Ot,!1,o)?r=++t%n:i===y(Ft,!1,o)?r=(--t+n)%n:"Home"===i?r=0:"End"===i&&(r=n-1);var s=b[r];s&&(W(s.button),m(">"+r),q(e,!0))}function P(){return n.paginationDirection||n.direction}function C(t){return b[p.toPage(t)]}function L(){var t=C(v(!0)),e=C(v());if(t){var n=t.button;V(n,Ee),O(n,Yt),R(n,Ht,-1)}if(e){var o=e.button;k(o,Ee),R(o,Yt,!0),R(o,Ht,"")}l("pagination:updated",{list:i,items:b},t,e)}return{items:b,mount:function e(){E(),c([St,Et,Dt],e);var r=n.pagination;w&&G(w,r?"":"none"),r&&(c([yt,kt,Ct],L),function(){var e=t.length,r=n.classes,s=n.i18n,a=n.perPage,c=g()?p.getEnd()+1:st(e/a);k(i=w||B("ul",r.pagination,h.track.parentElement),o=ge+"--"+P()),R(i,Wt,"tablist"),R(i,qt,s.select),R(i,Vt,P()===jt?"vertical":"");for(var l=0;l<c;l++){var v=B("li",null,i),m=B("button",{class:r.page,type:"button"},v),y=f.getIn(l).map((function(t){return t.slide.id})),E=!g()&&a>1?s.pageX:s.slideX;d(m,"click",u(S,l)),n.paginationKeyboard&&d(m,"keydown",u(x,l)),R(v,Wt,"presentation"),R(m,Wt,"tab"),R(m,Ut,y.join(" ")),R(m,qt,ft(E,l+1)),R(m,Ht,-1),b.push({li:v,button:m,page:l})}}(),L(),l("pagination:mounted",{list:i,items:b},C(t.index)))},destroy:E,getAt:C,update:L}},Sync:function(t,e,n){var i=n.isNavigation,o=n.slideFocus,r=[];function a(){var e,n;t.splides.forEach((function(e){e.isParent||(l(t,e.splide),l(e.splide,t))})),i&&((n=(e=Mt(t)).on)(bt,f),n("sk",h),n([vt,St],d),r.push(e),e.emit(Tt,t.splides))}function c(){r.forEach((function(t){t.destroy()})),s(r)}function l(t,e){var n=Mt(t);n.on(yt,(function(t,n,i){e.go(e.is(ze)?i:t)})),r.push(n)}function d(){R(e.Elements.list,Vt,n.direction===jt?"vertical":"")}function f(e){t.go(e.index)}function h(t,e){S(Xe,Be(e))&&(f(t),q(e))}return{setup:u(e.Media.set,{slideFocus:m(o)?i:o},!0),mount:a,destroy:c,remount:function(){c(),a()}}},Wheel:function(t,e,n){var i=Mt(t).bind,o=0;function r(i){if(i.cancelable){var r=i.deltaY,s=r<0,a=$(i),u=n.wheelMinThreshold||0,c=n.wheelSleep||0;at(r)>u&&a-o>c&&(t.go(s?"<":">"),o=a),function(i){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(i)}(s)&&q(i)}}return{mount:function(){n.wheel&&i(e.Elements.track,"wheel",r,Oe)}}},Live:function(t,e,n){var i=Mt(t).on,o=e.Elements.track,r=n.live&&!n.isNavigation,s=B("span",we),a=zt(90,u(c,!1));function c(t){R(o,te,t),t?(C(o,s),a.start()):(J(s),a.cancel())}function l(t){r&&R(o,Zt,t?"off":"polite")}return{mount:function(){r&&(l(!e.Autoplay.isPaused()),R(o,ee,!0),s.textContent="…",i(_t,u(l,!0)),i(At,u(l,!1)),i([wt,Ct],u(c,!0)))},disable:l,destroy:function(){O(o,[Zt,ee,te]),J(s)}}}}),Je={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:_e,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Ye(t,e,n){var i=e.Slides;function o(){i.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){Mt(t).on([vt,Et],o)},start:function(t,e){i.style("transition","opacity "+n.speed+"ms "+n.easing),c(e)},cancel:l}}function qe(t,e,n){var i,o=e.Move,r=e.Controller,s=e.Scroll,a=e.Elements.list,c=u(j,a,"transition");function l(){c(""),s.cancel()}return{mount:function(){Mt(t).bind(a,"transitionend",(function(t){t.target===a&&i&&(l(),i())}))},start:function(e,a){var u=o.toPosition(e,!0),l=o.getPosition(),d=function(e){var i=n.rewindSpeed;if(t.is(Me)&&i){var o=r.getIndex(!0),s=r.getEnd();if(0===o&&e>=s||o>=s&&0===e)return i}return n.speed}(e);at(u-l)>=1&&d>=1?n.useScroll?s.scroll(u,d,!1,a):(c("transform "+d+"ms "+n.easing),o.translate(u,!0),i=a):(o.jump(e),a())},cancel:l}}var Ke=function(){function t(e,n){var i;this.event=Mt(),this.Components={},this.state=(i=1,{set:function(t){i=t},is:function(t){return S(b(t),i)}}),this.splides=[],this._o={},this._E={};var o=v(e)?K(document,e):e;nt(o,o+" is invalid."),this.root=o,n=I({label:H(o,qt)||"",labelledby:H(o,Kt)||""},Je,t.defaults,n||{});try{I(n,JSON.parse(H(o,et)))}catch(t){nt(!1,"Invalid JSON")}this._o=Object.create(I({},n))}var e,n,o=t.prototype;return o.mount=function(t,e){var n=this,i=this.state,o=this.Components;return nt(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=e||this._T||(this.is(Ie)?Ye:qe),this._E=t||this._E,M(z({},Ue,this._E,{Transition:this._T}),(function(t,e){var i=t(n,o,n._o);o[e]=i,i.setup&&i.setup()})),M(o,(function(t){t.mount&&t.mount()})),this.emit(vt),k(this.root,be),i.set(3),this.emit(mt),this},o.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},o.go=function(t){return this._C.Controller.go(t),this},o.on=function(t,e){return this.event.on(t,e),this},o.off=function(t){return this.event.off(t),this},o.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(a(arguments,1))),this},o.add=function(t,e){return this._C.Slides.add(t,e),this},o.remove=function(t){return this._C.Slides.remove(t),this},o.is=function(t){return this._o.type===t},o.refresh=function(){return this.emit(Et),this},o.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?Mt(this).on(mt,this.destroy.bind(this,t)):(M(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(Lt),e.destroy(),t&&s(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();Ke.defaults={},Ke.STATES=r;class Qe{constructor(t,e){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=t,this.audioPath=e,this.currentPage=0,this.splideHandle=new Ke(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.addPageResizeListener()}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(e){this.currentBookType=e.bookType,this.numberOfPages=e.pages.length,this.currentBookType===t.CuriousReader?this.initializeCuriousReaderBook(e):this.currentBookType===t.GDL&&this.initializeGDLBook(e)}initializeCuriousReaderBook(t){for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");for(let i=0;i<t.pages[e].visualElements.length;i++){let o=t.pages[e].visualElements[i];if("text"==o.type){let t=o,e=document.createElement("div");e.classList.add("cr-text"),e.style.position="absolute",e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%",e.innerHTML=t.textContentAsHTML,n.appendChild(e)}else if("image"==o.type){let t=o;if(t.imageSource===this.emptyGlowImageTag)continue;let e=document.createElement("div");e.classList.add("cr-image"),e.style.position="absolute",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%";let i=document.createElement("img");i.src=this.imagesPath+t.imageSource.replace("images/",""),i.style.width="100%",i.style.height="100%",e.appendChild(i),n.appendChild(e)}this.splideHandle.add(n)}}}initializeGDLBook(t){for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<t.pages[e].visualElements.length;n++){let o=t.pages[e].visualElements[n];if("text"==o.type){let t=o,e=document.createElement("div");e.style.width="60%",e.classList.add("gdl-text"),e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.innerHTML=t.textContentAsHTML,i.appendChild(e)}else if("image"==o.type){let t=o,e=document.createElement("div");e.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+t.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",e.appendChild(n),i.appendChild(e)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(t){this.transitioningToPage=!0}}try{self["workbox:window:6.5.3"]&&_()}catch(Ve){}function Ve(t,e){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(t){n(t.data)},t.postMessage(e,[i.port2])}))}function $e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Ze(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return $e(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$e(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(Ve){}var tn=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))};function en(t,e){var n=location.href;return new URL(t,n).href===new URL(e,n).href}var nn=function(t,e){this.type=t,Object.assign(this,e)};function on(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function rn(){}var sn={type:"SKIP_WAITING"};function an(t,e){if(!e)return t&&t.then?t.then(rn):Promise.resolve()}var un=function(t){var e,n;function i(e,n){var i,o;return void 0===n&&(n={}),(i=t.call(this)||this).nn={},i.tn=0,i.rn=new tn,i.en=new tn,i.on=new tn,i.un=0,i.an=new Set,i.cn=function(){var t=i.fn,e=t.installing;i.tn>0||!en(e.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=e,t.removeEventListener("updatefound",i.cn)):(i.hn=e,i.an.add(e),i.rn.resolve(e)),++i.tn,e.addEventListener("statechange",i.ln)},i.ln=function(t){var e=i.fn,n=t.target,o=n.state,r=n===i.vn,s={sw:n,isExternal:r,originalEvent:t};!r&&i.mn&&(s.isUpdate=!0),i.dispatchEvent(new nn(o,s)),"installed"===o?i.wn=self.setTimeout((function(){"installed"===o&&e.waiting===n&&i.dispatchEvent(new nn("waiting",s))}),200):"activating"===o&&(clearTimeout(i.wn),r||i.en.resolve(n))},i.dn=function(t){var e=i.hn,n=e!==navigator.serviceWorker.controller;i.dispatchEvent(new nn("controlling",{isExternal:n,originalEvent:t,sw:e,isUpdate:i.mn})),n||i.on.resolve(e)},i.gn=(o=function(t){var e=t.data,n=t.ports,o=t.source;return on(i.getSW(),(function(){i.an.has(o)&&i.dispatchEvent(new nn("message",{data:e,originalEvent:t,ports:n,sw:o}))}))},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{return Promise.resolve(o.apply(this,t))}catch(t){return Promise.reject(t)}}),i.sn=e,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o,r=i.prototype;return r.register=function(t){var e=(void 0===t?{}:t).immediate,n=void 0!==e&&e;try{var i=this;return function(t,e){var n=t();return n&&n.then?n.then(e):e()}((function(){if(!n&&"complete"!==document.readyState)return an(new Promise((function(t){return window.addEventListener("load",t)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),on(i.bn(),(function(t){i.fn=t,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var e=i.fn.waiting;return e&&en(e.scriptURL,i.sn.toString())&&(i.hn=e,Promise.resolve().then((function(){i.dispatchEvent(new nn("waiting",{sw:e,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(t){return Promise.reject(t)}},r.update=function(){try{return this.fn?an(this.fn.update()):void 0}catch(t){return Promise.reject(t)}},r.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},r.messageSW=function(t){try{return on(this.getSW(),(function(e){return Ve(e,t)}))}catch(t){return Promise.reject(t)}},r.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Ve(this.fn.waiting,sn)},r.pn=function(){var t=navigator.serviceWorker.controller;return t&&en(t.scriptURL,this.sn.toString())?t:void 0},r.bn=function(){try{var t=this;return function(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}((function(){return on(navigator.serviceWorker.register(t.sn,t.nn),(function(e){return t.un=performance.now(),e}))}),(function(t){throw t}))}catch(t){return Promise.reject(t)}},(o=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}(i.prototype,o),i}(function(){function t(){this.Pn=new Map}var e=t.prototype;return e.addEventListener=function(t,e){this.Sn(t).add(e)},e.removeEventListener=function(t,e){this.Sn(t).delete(e)},e.dispatchEvent=function(t){t.target=this;for(var e,n=Ze(this.Sn(t.type));!(e=n()).done;)(0,e.value)(t)},e.Sn=function(t){return this.Pn.has(t)||this.Pn.set(t,new Set),this.Pn.get(t)},t}()),cn=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function s(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((i=i.apply(t,e||[])).next())}))};new class{constructor(t,e,i){this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.contentFilePath=t,this.imagesPath=e,this.audioPath=i,this.contentParser=new n(t),this.playBackEngine=new Qe(e,i),this.broadcastChannel=new BroadcastChannel("my-channel"),null==localStorage.getItem(this.isCached)||localStorage.getItem(this.isCached)}initialize(){return cn(this,void 0,void 0,(function*(){let t=yield this.contentParser.parseBook();console.log("Dev App initialized!"),console.log(t),this.enforceLandscapeMode(),window.addEventListener("load",(()=>cn(this,void 0,void 0,(function*(){if("serviceWorker"in navigator){let t=new un("./sw.js",{});t.register().then((t=>{t.installing})),t.addEventListener("activated",(t=>{console.log("Service Worker installed, requesting a cache!")}))}})))),this.playBackEngine.initializeBook(t)}))}readLanguageDataFromCacheAndNotifyAndroidApp(){}enforceLandscapeMode(){try{screen.orientation&&screen.orientation.lock&&screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((t=>{console.log("Screen orientation lock failed! Interface may not work as expected on mobile devices!")}))}catch(t){console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}}("/BookContent/TalkingBagEn/content/content.json","/BookContent/TalkingBagEn/content/images/","/BookContent/TalkingBagEn/content/audio/").initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,